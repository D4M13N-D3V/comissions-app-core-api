// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using comissions.app.database;

#nullable disable

namespace comissions.app.api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240218121059_page settings")]
    partial class pagesettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("comissions.app.database.Entities.SellerProfilePageSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionBackgroundColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionHeaderColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionHeaderImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DescriptionHeaderSize")
                        .HasColumnType("integer");

                    b.Property<string>("DescriptionHeaderText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DescriptionHeaderUseImage")
                        .HasColumnType("boolean");

                    b.Property<string>("DescriptionTextColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DescriptionTextSize")
                        .HasColumnType("integer");

                    b.Property<string>("HeaderColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeaderImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HeaderTextSize")
                        .HasColumnType("integer");

                    b.Property<bool>("HeaderUseImage")
                        .HasColumnType("boolean");

                    b.Property<string>("PortfolioBackgroundColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PortfolioColumns")
                        .HasColumnType("integer");

                    b.Property<bool>("PortfolioEnabledScrolling")
                        .HasColumnType("boolean");

                    b.Property<bool>("PortfolioMasonry")
                        .HasColumnType("boolean");

                    b.Property<int>("PortfolioMaximumSize")
                        .HasColumnType("integer");

                    b.Property<string>("PortfolionHeaderColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PortfolionHeaderImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PortfolionHeaderSize")
                        .HasColumnType("integer");

                    b.Property<string>("PortfolionHeaderText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PortfolionHeaderUseImage")
                        .HasColumnType("boolean");

                    b.Property<string>("RequestBackgroundColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestButtonBGColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestButtonHoverBGColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestButtonTextColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestHeaderColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequestHeaderImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RequestHeaderSize")
                        .HasColumnType("integer");

                    b.Property<string>("RequestHeaderText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RequestHeaderUseImage")
                        .HasColumnType("boolean");

                    b.Property<string>("RequestTermsColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SellerProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SellerProfileId")
                        .IsUnique();

                    b.ToTable("SellerProfilePageSettings");
                });

            modelBuilder.Entity("comissions.app.database.Entities.SellerProfilePortfolioPiece", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SellerProfileId")
                        .HasColumnType("integer");

                    b.Property<int?>("SellerServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SellerProfileId");

                    b.HasIndex("SellerServiceId");

                    b.ToTable("SellerProfilePortfolioPieces");
                });

            modelBuilder.Entity("comissions.app.database.Entities.SellerProfileRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AcceptedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SellerProfileRequests");
                });

            modelBuilder.Entity("comissions.app.database.Entities.SellerService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("SellerProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SellerProfileId");

                    b.ToTable("SellerServices");
                });

            modelBuilder.Entity("comissions.app.database.Entities.SellerServiceOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentUrl")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("SellerId")
                        .HasColumnType("integer");

                    b.Property<int>("SellerServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TermsAcceptedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SellerServiceId");

                    b.ToTable("SellerServiceOrders");
                });

            modelBuilder.Entity("comissions.app.database.Entities.SellerServiceOrderReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Review")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SellerServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("SellerServiceOrderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("SellerServiceId");

                    b.HasIndex("SellerServiceOrderId");

                    b.ToTable("SellerServiceOrderReviews");
                });

            modelBuilder.Entity("comissions.app.database.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BanAdminId")
                        .HasColumnType("text");

                    b.Property<bool>("Banned")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("BannedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BannedReason")
                        .HasColumnType("text");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SuspendAdminId")
                        .HasColumnType("text");

                    b.Property<bool>("Suspended")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SuspendedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SuspendedReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UnbanDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UnsuspendDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserSellerProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("comissions.app.database.Entities.UserSellerProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AgeRestricted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PrepaymentRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("RequestGuidelines")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SellerProfilePageSettingsId")
                        .HasColumnType("integer");

                    b.Property<string>("SocialMediaLink1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialMediaLink2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialMediaLink3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialMediaLink4")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StripeAccountId")
                        .HasColumnType("text");

                    b.Property<string>("SuspendAdminId")
                        .HasColumnType("text");

                    b.Property<bool>("Suspended")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SuspendedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SuspendedReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UnsuspendDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSellerProfiles");
                });

            modelBuilder.Entity("comissions.app.database.Entities.SellerProfilePageSettings", b =>
                {
                    b.HasOne("comissions.app.database.Entities.UserSellerProfile", "SellerProfile")
                        .WithOne("SellerProfilePageSettings")
                        .HasForeignKey("comissions.app.database.Entities.SellerProfilePageSettings", "SellerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellerProfile");
                });

            modelBuilder.Entity("comissions.app.database.Entities.SellerProfilePortfolioPiece", b =>
                {
                    b.HasOne("comissions.app.database.Entities.UserSellerProfile", "SellerProfile")
                        .WithMany("PortfolioPieces")
                        .HasForeignKey("SellerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comissions.app.database.Entities.SellerService", "SellerService")
                        .WithMany("PortfolioPieces")
                        .HasForeignKey("SellerServiceId");

                    b.Navigation("SellerProfile");

                    b.Navigation("SellerService");
                });

            modelBuilder.Entity("comissions.app.database.Entities.SellerProfileRequest", b =>
                {
                    b.HasOne("comissions.app.database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("comissions.app.database.Entities.SellerService", b =>
                {
                    b.HasOne("comissions.app.database.Entities.UserSellerProfile", "SellerProfile")
                        .WithMany("SellerServices")
                        .HasForeignKey("SellerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellerProfile");
                });

            modelBuilder.Entity("comissions.app.database.Entities.SellerServiceOrder", b =>
                {
                    b.HasOne("comissions.app.database.Entities.User", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comissions.app.database.Entities.UserSellerProfile", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comissions.app.database.Entities.SellerService", "SellerService")
                        .WithMany()
                        .HasForeignKey("SellerServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Seller");

                    b.Navigation("SellerService");
                });

            modelBuilder.Entity("comissions.app.database.Entities.SellerServiceOrderReview", b =>
                {
                    b.HasOne("comissions.app.database.Entities.User", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comissions.app.database.Entities.SellerService", "SellerService")
                        .WithMany("Reviews")
                        .HasForeignKey("SellerServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("comissions.app.database.Entities.SellerServiceOrder", "SellerServiceOrder")
                        .WithMany("Reviews")
                        .HasForeignKey("SellerServiceOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("SellerService");

                    b.Navigation("SellerServiceOrder");
                });

            modelBuilder.Entity("comissions.app.database.Entities.UserSellerProfile", b =>
                {
                    b.HasOne("comissions.app.database.Entities.User", "User")
                        .WithOne("UserSellerProfile")
                        .HasForeignKey("comissions.app.database.Entities.UserSellerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("comissions.app.database.Entities.SellerService", b =>
                {
                    b.Navigation("PortfolioPieces");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("comissions.app.database.Entities.SellerServiceOrder", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("comissions.app.database.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("UserSellerProfile");
                });

            modelBuilder.Entity("comissions.app.database.Entities.UserSellerProfile", b =>
                {
                    b.Navigation("PortfolioPieces");

                    b.Navigation("SellerProfilePageSettings")
                        .IsRequired();

                    b.Navigation("SellerServices");
                });
#pragma warning restore 612, 618
        }
    }
}
